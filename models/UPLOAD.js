import mongoose from "mongoose";

const imageSchema = new mongoose.Schema({
  fileType: { type: String, required: true },
  fileName: { type: String, required: true },
  filePath: { type: String, required: true },
  fileSize: { type: String, required: true },
});

const uploadSchema = new mongoose.Schema({
  categoryName: {
    type: String,
    required: true,
    enum: [
      "Blazer",
      "Shirt",
      "Sweat-Shirt",
      "Boxer",
      "Top",
      "Camisole",
      "Jeans",
      "Dress",
      "Lingerie",
      "Tshirt",
      "Jacket",
      "Innerwear",
      "Other",
    ],
  },
  // otherCategoryName: {
  //   type: String,
  //   trim: true,
  //   required: function () {
  //     return this.categoryName && this.categoryName === "Other"; // Only required if "Other" is selected
  //   },
  // },
  platforms: {
    type: [String],
    enum: [
      "Amazon",
      "Flipkart",
      "Myntra",
      "Meesho",
      "Ajio",
      "Snapdeal",
      "Etsy",
      "Shopify",
      "Woocommerce",
      "eBay",
      "Instagram",
      "Facebook",
      "Pinterest",
      "YouTube",
      "TikTok",
      "WhatsApp Business",
      "Telegram Groups",
      "Google Ads",
      "Facebook Ads",
      "Instagram Ads",
      "Other",
    ],

    // validate: {
    //   validator: function (value) {
    //     // Ensure that if 'Other' is selected, there is a custom platform name provided
    //     if (value.includes("Other") && !this.otherPlatform) {
    //       return false;
    //     }
    //     return true;
    //   },
    //   message: "If 'Other' is selected, a custom platform name is required.",
    // },
  },
  categoryType: {
    type: String,
    required: true,
    enum: ["Male", "Female"],
  },
  AgeGroup: {
    type: String,
    required: true,
    enum: ["Adult", "Teen"],
  },
  description: {
    type: String,
  },
  // otherPlatform: {
  //   type: String,
  //   trim: true,
  //   required: function () {
  //     return this.platforms && this.platforms.includes("Other"); // Only required if "Other" is selected
  //   },
  // },
  backgroundOption: {
    type: String,
    enum: [
      "1.webp",
      "2.webp",
      "3.webp",
      "4.webp",
      "5.webp",
      "6.webp",
      "7.webp",
      "8.webp",
      "9.webp",
      "10.webp",
      "11.webp",
      "12.webp",
      "13.webp",
      "14.webp",
      "15.webp",
      "16.webp",
      "17.webp",
      "18.webp",
      "19.webp",
      "20.webp",
      "21.webp",
      "22.webp",
      "23.webp",
      "24.webp",
      "25.webp",
      "26.webp",
      "27.webp",
      "28.webp",
      "29.webp",
      "30.webp",
      "31.webp",
      "32.webp",
      "33.webp",
      "34.webp",
      "35.webp",
      "36.webp",
      "37.webp",
      "38.webp",
      "39.webp",
      "40.webp",
      "41.webp",
      "42.webp",
      "43.webp",
      "44.webp",
      "45.webp",
      "46.webp",
      "47.webp",
      "48.webp",
      "49.webp",
      "50.webp",
      "51.webp",
      "52.webp",
      "53.webp",
      "54.webp",
      "55.webp",
      "56.webp",
      "57.webp",
      "58.webp",
      "59.webp",
      "60.webp",
      "61.webp",
      "62.webp",
      "63.webp",
      "64.webp",
      "65.webp",
      "66.webp",
      "67.webp",
      "68.webp",
      "69.webp",
      "70.webp",
      "71.webp",
      "72.webp",
      "73.webp",
      "74.webp",
      "75.webp",
      "76.webp",
      "77.webp",
      "78.webp",
      "79.webp",
      "80.webp",
      "81.webp",
      "82.webp",
      "83.webp",
      "84.webp",
      "85.webp",
      "86.webp",
      "87.webp",
      "88.webp",
      "89.webp",
      "90.webp",
      "91.webp",
      "92.webp",
      "93.webp",
      "94.webp",
      "95.webp",
      "96.webp",
      "97.webp",
      "98.webp",
    ],
    required: true,
  },
  backgroundImage: { type: imageSchema },
  photoshootType: {
    type: String,
    required: true,
    enum: ["single", "multiple"],
  },
  folderName: { type: String, required: true, unique: true },
  folderId: { type: String, required: true, unique: true },
  frontImage: { type: imageSchema, required: true },
  backImage: { type: imageSchema },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    refPath: "createdByModel",
  },
  createdByModel: {
    type: String,
    required: true,
    enum: ["cmanager", "company"], // Allowed model names
  },
  company: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "company",
    required: true,
  },
  isphotoshootcomplete: {
    type: Boolean,
    default: false,
  },
  photoshoot: [{ type: String }],
  createdAt: { type: Date, default: Date.now },
});

const Upload = mongoose.model("Upload", uploadSchema);

export default Upload;
